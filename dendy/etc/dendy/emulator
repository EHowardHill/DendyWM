#!/usr/bin/env python3

import os
import sys
import subprocess
import argparse
import tempfile
import json
from pathlib import Path

class LibretroFrontend:
    def __init__(self, config_file='configuration.json'):
        self.config_file = config_file
        self.config = self.load_configuration()
        
        # Use configuration or fallback to defaults
        self.core_mappings = self.config.get('core_mappings', self.get_default_core_mappings())
        self.core_directories = self.config.get('core_directories', self.get_default_core_directories())
        self.retroarch_paths = self.config.get('retroarch_paths', self.get_default_retroarch_paths())
        self.retroarch_config = self.config.get('retroarch_config', self.get_default_retroarch_config())

    def get_default_core_mappings(self):
        """Default core mappings for different ROM extensions"""
        return {
            # Game Boy Advance
            '.gba': 'mgba_libretro.so',
            
            # Game Boy / Game Boy Color
            '.gb': 'gambatte_libretro.so',
            '.gbc': 'gambatte_libretro.so',
            
            # Nintendo Entertainment System
            '.nes': 'nestopia_libretro.so',
            
            # Super Nintendo Entertainment System
            '.smc': 'snes9x_libretro.so',
            '.sfc': 'snes9x_libretro.so',
            
            # Sega Genesis/Mega Drive
            '.md': 'genesis_plus_gx_libretro.so',
            '.gen': 'genesis_plus_gx_libretro.so',
            '.bin': 'genesis_plus_gx_libretro.so',
            
            # Sega Master System
            '.sms': 'genesis_plus_gx_libretro.so',
            
            # PlayStation
            '.cue': 'beetle_psx_libretro.so',
            '.pbp': 'beetle_psx_libretro.so',
            
            # Nintendo 64
            '.n64': 'mupen64plus_next_libretro.so',
            '.z64': 'mupen64plus_next_libretro.so',
            '.v64': 'mupen64plus_next_libretro.so',
            
            # Arcade
            '.zip': 'mame_libretro.so',
            
            # Atari 2600
            '.a26': 'stella_libretro.so',
            
            # Neo Geo Pocket
            '.ngp': 'mednafen_ngp_libretro.so',
            '.ngc': 'mednafen_ngp_libretro.so',
            
            # PC Engine/TurboGrafx-16
            '.pce': 'mednafen_pce_libretro.so',
            
            # Lynx
            '.lnx': 'handy_libretro.so',
            
            # Virtual Boy
            '.vb': 'mednafen_vb_libretro.so',
        }

    def get_default_core_directories(self):
        """Default libretro core directories on Debian"""
        return [
            '/usr/lib/x86_64-linux-gnu/libretro/',
            '/usr/lib/libretro/',
            '/usr/local/lib/libretro/',
            '~/.local/lib/libretro/',
        ]

    def get_default_retroarch_paths(self):
        """Default RetroArch executable paths"""
        return [
            '/usr/bin/retroarch',
            '/usr/local/bin/retroarch',
            '~/.local/bin/retroarch',
        ]

    def get_default_retroarch_config(self):
        """Default RetroArch configuration settings"""
        return {
            "video_fullscreen": "true",
            "video_windowed_fullscreen": "false",
            "fps_show": "false",
            "notification_show_autoconfig": "false",
            "notification_show_cheats_applied": "false",
            "notification_show_config_override_load": "false",
            "notification_show_fast_forward": "false",
            "notification_show_patch_applied": "false",
            "notification_show_refresh_rate": "false",
            "notification_show_remap_load": "false",
            "notification_show_save_state": "false",
            "notification_show_screenshot": "false",
            "notification_show_set_initial_disk": "false",
            "notification_show_when_menu_is_alive": "false",
            "menu_enable_widgets": "false",
            "menu_widget_scale_auto": "false",
            "menu_show_load_content_animation": "false",
            "menu_show_online_updater": "false",
            "menu_show_core_updater": "false",
            "video_font_enable": "false",
            "video_msg_bgcolor_enable": "false",
            "config_save_on_exit": "false",
            "game_specific_options": "false",
            "auto_overrides_enable": "false",
            "auto_remaps_enable": "false",
            "auto_shaders_enable": "false",
            "core_option_category_enable": "false",
            "menu_driver": "null"
        }

    def load_configuration(self):
        """Load configuration from JSON file"""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    return json.load(f)
            except json.JSONDecodeError as e:
                print(f"Error parsing {self.config_file}: {e}")
                print("Using default configuration...")
                return {}
            except Exception as e:
                print(f"Error reading {self.config_file}: {e}")
                print("Using default configuration...")
                return {}
        else:
            print(f"Configuration file '{self.config_file}' not found.")
            print("Using default configuration...")
            return {}

    def create_default_config_file(self):
        """Create a default configuration.json file"""
        default_config = {
            "core_mappings": self.get_default_core_mappings(),
            "core_directories": self.get_default_core_directories(),
            "retroarch_paths": self.get_default_retroarch_paths(),
            "retroarch_config": self.get_default_retroarch_config(),
            "special_handling": {
                "bin_files": {
                    "description": "Special handling for .bin files - check for .cue file to determine if PlayStation",
                    "default_core": "genesis_plus_gx_libretro.so",
                    "playstation_core": "beetle_psx_libretro.so"
                }
            }
        }
        
        try:
            with open(self.config_file, 'w') as f:
                json.dump(default_config, f, indent=2)
            print(f"Created default configuration file: {self.config_file}")
            return True
        except Exception as e:
            print(f"Error creating configuration file: {e}")
            return False

    def find_retroarch(self):
        """Find RetroArch executable"""
        for path in self.retroarch_paths:
            expanded_path = os.path.expanduser(path)
            if os.path.isfile(expanded_path) and os.access(expanded_path, os.X_OK):
                return expanded_path
        
        # Try which command as fallback
        try:
            result = subprocess.run(['which', 'retroarch'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                return result.stdout.strip()
        except:
            pass
        
        return None

    def find_core(self, core_name):
        """Find libretro core file"""
        for directory in self.core_directories:
            expanded_dir = os.path.expanduser(directory)
            core_path = os.path.join(expanded_dir, core_name)
            if os.path.isfile(core_path):
                return core_path
        return None

    def get_core_for_rom(self, rom_path):
        """Determine which core to use based on ROM extension"""
        rom_path = Path(rom_path)
        extension = rom_path.suffix.lower()
        
        # Special handling for .bin files (could be Genesis or PlayStation)
        if extension == '.bin':
            special_handling = self.config.get('special_handling', {}).get('bin_files', {})
            default_core = special_handling.get('default_core', 'genesis_plus_gx_libretro.so')
            playstation_core = special_handling.get('playstation_core', 'beetle_psx_libretro.so')
            
            # Check for associated .cue file to determine if it's PlayStation
            cue_file = rom_path.with_suffix('.cue')
            if cue_file.exists():
                return playstation_core
            else:
                # Use default core for .bin files (usually Genesis)
                return default_core
        
        return self.core_mappings.get(extension)

    def create_minimal_config(self):
        """Create a minimal RetroArch config from loaded configuration"""
        config_content = ""
        
        # Build config content from loaded settings
        for key, value in self.retroarch_config.items():
            config_content += f'{key} = "{value}"\n'
        
        # Create temporary config file
        temp_config = tempfile.NamedTemporaryFile(mode='w', suffix='.cfg', delete=False)
        temp_config.write(config_content)
        temp_config.close()
        return temp_config.name

    def launch_game(self, rom_path, core_override=None):
        """Launch the game with RetroArch"""
        if not os.path.isfile(rom_path):
            print(f"Error: ROM file '{rom_path}' not found!")
            return False
        
        # Find RetroArch
        retroarch = self.find_retroarch()
        if not retroarch:
            print("Error: RetroArch not found!")
            print("Install it with: sudo apt install retroarch")
            return False
        
        # Determine core
        if core_override:
            core_name = core_override
        else:
            core_name = self.get_core_for_rom(rom_path)
            if not core_name:
                print(f"Error: Unknown ROM type for '{rom_path}'")
                return False
        
        # Find core file
        core_path = self.find_core(core_name)
        if not core_path:
            print(f"Error: Core '{core_name}' not found!")
            print("Available cores might be installed with:")
            print("sudo apt install libretro-* retroarch-assets")
            return False
        
        print(f"Launching '{rom_path}' with core '{core_name}'")
        
        # Create minimal config
        config_path = self.create_minimal_config()
        
        # Build RetroArch command
        cmd = [
            retroarch,
            '-L', core_path,      # Load core
            '--fullscreen',       # Start in fullscreen
            '--config', config_path,  # Use minimal config
            rom_path              # ROM file
        ]
        
        try:
            # Launch RetroArch with completely suppressed output
            with open(os.devnull, 'w') as devnull:
                result = subprocess.run(cmd, 
                                      stdout=devnull, 
                                      stderr=devnull,
                                      stdin=devnull)
            return result.returncode == 0
        except KeyboardInterrupt:
            print("\nInterrupted by user")
            return True
        except Exception as e:
            print(f"Error launching RetroArch: {e}")
            return False
        finally:
            # Clean up temporary config file
            try:
                os.unlink(config_path)
            except:
                pass

    def list_supported_formats(self):
        """List all supported ROM formats from configuration"""
        print("Supported ROM formats:")
        print("-" * 40)
        
        # Group extensions by core
        core_to_extensions = {}
        for ext, core in self.core_mappings.items():
            if core not in core_to_extensions:
                core_to_extensions[core] = []
            core_to_extensions[core].append(ext)
        
        # Display grouped by core
        for core, extensions in sorted(core_to_extensions.items()):
            print(f"{core:<30} {', '.join(sorted(extensions))}")

def main():
    parser = argparse.ArgumentParser(
        description='Simple Libretro Frontend for Debian 12',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  %(prog)s ./game.gba                    # Launch GBA ROM
  %(prog)s ./game.nes                    # Launch NES ROM
  %(prog)s ./game.bin --core snes9x_libretro.so  # Force specific core
  %(prog)s --list-formats                # Show supported formats
  %(prog)s --create-config               # Create default config file
        '''
    )
    
    parser.add_argument('rom_path', nargs='?', help='Path to ROM file')
    parser.add_argument('--core', help='Override core selection (e.g., snes9x_libretro.so)')
    parser.add_argument('--config', default='configuration.json', 
                       help='Configuration file path (default: configuration.json)')
    parser.add_argument('--list-formats', action='store_true', 
                       help='List supported ROM formats')
    parser.add_argument('--create-config', action='store_true',
                       help='Create default configuration.json file')
    
    args = parser.parse_args()
    
    frontend = LibretroFrontend(args.config)
    
    if args.create_config:
        frontend.create_default_config_file()
        return
    
    if args.list_formats:
        frontend.list_supported_formats()
        return
    
    if not args.rom_path:
        parser.print_help()
        return
    
    # Launch the game
    success = frontend.launch_game(args.rom_path, args.core)
    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()